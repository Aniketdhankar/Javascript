

---

## **What is `XMLHttpRequest`?**

`XMLHttpRequest` (often abbreviated **XHR**) is a **built-in JavaScript object** that allows your webpage to talk to a server **without reloading the page**.

This is the basis of **AJAX (Asynchronous JavaScript and XML)**. Today, we mostly use **JSON** instead of XML, but the object name stayed the same.

---

## **Why use it?**

* To get data from a server **without refreshing the page**
* To send data to a server (like submitting a form) **without reloading**
* To build dynamic websites (like live search, chat apps, weather apps, etc.)

---

## **Basic Steps to Use `XMLHttpRequest`**

There are **4 main steps**:

### 1️⃣ **Create the XHR object**

```javascript
const xhr = new XMLHttpRequest();
```

* This creates a new request object that will handle communication with the server.

---

### 2️⃣ **Open the request**

```javascript
xhr.open('GET', 'https://api.example.com/data', true);
```

* **`GET`** – HTTP method (other methods include `POST`, `PUT`, `DELETE`)
* **URL** – The server address you want to get or send data to
* **`true`** – Makes the request **asynchronous** (don’t freeze the page)

---

### 3️⃣ **Define what happens when the response comes**

```javascript
xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) { // 4 = request completed
        if (xhr.status === 200) { // 200 = success
            const data = JSON.parse(xhr.responseText); // convert JSON string to object
            console.log(data); // use the data
        } else {
            console.error('Error:', xhr.status); // handle errors
        }
    }
};
```

* **`readyState`** tells us the current state of the request:

| Value | State                               |
| ----- | ----------------------------------- |
| 0     | UNSENT – not initialized            |
| 1     | OPENED – request opened             |
| 2     | HEADERS_RECEIVED – headers received |
| 3     | LOADING – response loading          |
| 4     | DONE – request finished             |

* **`status`** is the HTTP status code (200 = success, 404 = not found, 500 = server error)
* **`responseText`** contains the response from the server (usually JSON)

---

### 4️⃣ **Send the request**

```javascript
xhr.send();
```

* For **GET requests**, just call `.send()`
* For **POST requests**, you can send data like this:

```javascript
xhr.open('POST', 'https://api.example.com/data', true);
xhr.setRequestHeader('Content-Type', 'application/json'); // tell server the data format
xhr.send(JSON.stringify({ name: 'Aniket', age: 22 }));
```

---

## **Complete GET Example**

```javascript
const xhr = new XMLHttpRequest();
xhr.open('GET', 'https://jsonplaceholder.typicode.com/todos/1', true);

xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {
        if (xhr.status === 200) {
            const data = JSON.parse(xhr.responseText);
            console.log('Data from server:', data);
        } else {
            console.error('Error:', xhr.status);
        }
    }
};

xhr.send();
```

* This will fetch a **sample todo item** from the fake API and log it in the console.

---

### ✅ **Key Points for Beginners**

1. `XMLHttpRequest` allows **asynchronous requests** (AJAX).
2. `readyState` + `status` = check if the request worked.
3. Use `JSON.parse()` to convert server response into a JavaScript object.
4. For sending data, always set the **Content-Type** header.

---

### **Why You Might Prefer `fetch` Instead**

`XMLHttpRequest` works, but it’s **longer and harder to read**. Modern JavaScript uses `fetch` because it’s **simpler and promise-based**.

```javascript
// Same GET request using fetch
fetch('https://jsonplaceholder.typicode.com/todos/1')
    .then(res => res.json())
    .then(data => console.log('Data from server:', data))
    .catch(err => console.error(err));
```




