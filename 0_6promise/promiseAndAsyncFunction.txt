

---

## 🧩 1. What is a Promise in JavaScript?

A **Promise** in JavaScript is like a **"container for a future value"** — something that will **give you a result later**, not right now.

It helps you handle **asynchronous operations**, like:

* Fetching data from an API,
* Reading a file,
* Waiting for a timer, etc.

---

### 🕐 Example (Real Life Analogy)

Imagine you order pizza 🍕 online.

* The restaurant says: *"Your pizza will arrive soon."*
* You don’t wait at the door — you keep doing your work.
* Later, the pizza arrives (✅ success) or maybe it gets canceled (❌ failure).

That’s exactly how a **Promise** works.

---

### 🧠 In Code:

```js
let pizzaPromise = new Promise(function(resolve, reject) {
  let pizzaReady = true;

  if (pizzaReady) {
    resolve("Pizza is delivered!");
  } else {
    reject("Pizza shop is closed!");
  }
});
```

* `resolve()` → means the task was successful.
* `reject()` → means the task failed.

---

### 🧾 Using the Promise

```js
pizzaPromise
  .then(function(message) {
    console.log("Success:", message);
  })
  .catch(function(error) {
    console.log("Error:", error);
  })
  .finally(function() {
    console.log("Order process finished!");
  });
```

**Output (if pizzaReady = true):**

```
Success: Pizza is delivered!
Order process finished!
```

---

✅ **In short:**

* Promise represents a value that will be available **in the future**.
* `.then()` handles success.
* `.catch()` handles error.
* `.finally()` runs no matter what happens.


*When you call resolve() with another Promise, the outer one waits for it to finish.
*So the outer Promise doesn’t resolve immediately.
*It resolves only after the inner Promise is done.
*This shows how Promises can be chained or linked together to control timing and order.
*You can make one Promise depend on another Promise.

---

## ⚡ 2. What is `async` and `await`?

`async` and `await` are a **simpler way to use Promises** — they make asynchronous code look like normal (synchronous) code.

Think of them as **"Promise + easier syntax"**.

---

### 📘 Basic Example

Without async/await:

```js
fetch("https://api.example.com/data")
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
```

With async/await:

```js
async function getData() {
  try {
    let response = await fetch("https://api.example.com/data");
    let data = await response.json();
    console.log(data);
  } catch (error) {
    console.log("Error:", error);
  }
}

getData();
```

---

### 💡 How it works

* `async` makes a function return a **Promise**.
* `await` **pauses** the function until the Promise is done.

It’s like saying:

> “Wait here until the pizza is delivered before moving to the next line.”

---

### 🔄 Example with our pizza

```js
function orderPizza() {
  return new Promise((resolve) => {
    setTimeout(() => resolve("Pizza is ready!"), 2000);
  });
}

async function eatPizza() {
  console.log("Ordering pizza...");
  let result = await orderPizza();  // waits for the Promise
  console.log(result);
  console.log("Eating pizza now!");
}

eatPizza();
```

**Output:**

```
Ordering pizza...
(Pause 2 seconds)
Pizza is ready!
Eating pizza now!
```

---

## 🧠 Summary Table

| Concept     | Meaning                           | Example                    |
| ----------- | --------------------------------- | -------------------------- |
| **Promise** | A future value                    | `let p = new Promise(...)` |
| **resolve** | Success                           | `resolve("done")`          |
| **reject**  | Failure                           | `reject("error")`          |
| **then()**  | Handle success                    | `.then(result => …)`       |
| **catch()** | Handle failure                    | `.catch(error => …)`       |
| **async**   | Makes a function return a Promise | `async function f() {}`    |
| **await**   | Wait for a Promise to finish      | `let data = await promise` |

